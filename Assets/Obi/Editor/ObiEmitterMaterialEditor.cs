using UnityEditor;
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

namespace Obi{
	
	/**
	 * Custom inspector for ObiEmitterMaterial assets. 
	 */
	
	[CustomEditor(typeof(ObiEmitterMaterial)), CanEditMultipleObjects] 
	public class ObiEmitterMaterialEditor : Editor
	{
		
		ObiEmitterMaterial material;

		SerializedProperty isFluid;
		SerializedProperty randomRadius;			
		SerializedProperty restDensity;		
		SerializedProperty viscosity;			
		SerializedProperty surfaceTension;	

		SerializedProperty buoyancy; 						
		SerializedProperty atmosphericDrag;				
		SerializedProperty atmosphericPressure;				
		SerializedProperty vorticity;	
		
		public void OnEnable(){
			material = (ObiEmitterMaterial)target;

			isFluid = serializedObject.FindProperty("isFluid");
			randomRadius = serializedObject.FindProperty("randomRadius");
			restDensity = serializedObject.FindProperty("restDensity");
			viscosity = serializedObject.FindProperty("viscosity");
			surfaceTension = serializedObject.FindProperty("surfaceTension");

			buoyancy = serializedObject.FindProperty("buoyancy");
			atmosphericDrag = serializedObject.FindProperty("atmosphericDrag");
			atmosphericPressure = serializedObject.FindProperty("atmosphericPressure");
			vorticity = serializedObject.FindProperty("vorticity");
		}
		
		public override void OnInspectorGUI() {
			
			serializedObject.UpdateIfDirtyOrScript();
			
			ObiEmitterMaterial.MaterialChanges changes = ObiEmitterMaterial.MaterialChanges.PER_MATERIAL_DATA;			

			EditorGUI.BeginChangeCheck();
			EditorGUILayout.PropertyField(isFluid);
			if (EditorGUI.EndChangeCheck())
				changes |= ObiEmitterMaterial.MaterialChanges.PER_PARTICLE_DATA;

			ObiEmitterMaterial.MaterialDimensions newMode = (ObiEmitterMaterial.MaterialDimensions) EditorGUILayout.EnumPopup(
															 new GUIContent("Mode","Sets the material for 2D mode or 3D mode. This affects particle mass/density calculations."),
															 material.Mode);
			if (material.Mode != newMode){
				Undo.RecordObject(material, "Set emitter material mode");
				material.Mode = newMode;
				EditorUtility.SetDirty(material);
			}
				
			GUI.enabled = !isFluid.boolValue;
				EditorGUI.BeginChangeCheck();

				float newRestRadius = EditorGUILayout.FloatField(new GUIContent("Rest radius","Enabling this allows particles generated by this actor to interact with each other."),material.RestRadius);
				if (material.RestRadius != newRestRadius){
					Undo.RecordObject(material, "Set rest radius");
					material.RestRadius = newRestRadius;
					EditorUtility.SetDirty(material);
				}

				EditorGUILayout.PropertyField(randomRadius);

				float newParticleMass = EditorGUILayout.FloatField(new GUIContent("Particle mass","Enabling this allows particles generated by this actor to interact with each other."),material.ParticleMass);
				if (material.ParticleMass != newParticleMass){
					Undo.RecordObject(material, "Set particle mass");
					material.ParticleMass = newParticleMass;
					EditorUtility.SetDirty(material);
				}

				if (EditorGUI.EndChangeCheck())
				{
					changes |= ObiEmitterMaterial.MaterialChanges.PER_PARTICLE_DATA;
				}

			GUI.enabled = isFluid.boolValue;
			EditorGUI.BeginChangeCheck();

				float newResolution = EditorGUILayout.FloatField(new GUIContent("Resolution","Enabling this allows particles generated by this actor to interact with each other."),material.Resolution);
				if (material.Resolution != newResolution){
					Undo.RecordObject(material, "Set resolution");
					material.Resolution = newResolution;
					EditorUtility.SetDirty(material);
				}

				float newSmoothing = EditorGUILayout.FloatField(new GUIContent("Smoothing","Enabling this allows particles generated by this actor to interact with each other."),material.Smoothing);
				if (material.Smoothing != newSmoothing){
					Undo.RecordObject(material, "Set smoothing");
					material.Smoothing = newSmoothing;
					EditorUtility.SetDirty(material);
				}

				float newRestDensity = EditorGUILayout.FloatField(new GUIContent("Rest density","Enabling this allows particles generated by this actor to interact with each other."),material.RestDensity);
				if (material.RestDensity != newRestDensity){
					Undo.RecordObject(material, "Set smoothing");
					material.RestDensity = newRestDensity;
					EditorUtility.SetDirty(material);
				}

				if (EditorGUI.EndChangeCheck())
				{
					changes |= ObiEmitterMaterial.MaterialChanges.PER_PARTICLE_DATA;
				}
				EditorGUILayout.PropertyField(viscosity);
				EditorGUILayout.PropertyField(surfaceTension);
				EditorGUILayout.PropertyField(buoyancy);
				EditorGUILayout.PropertyField(atmosphericDrag);
				EditorGUILayout.PropertyField(atmosphericPressure);
				EditorGUILayout.PropertyField(vorticity);
			GUI.enabled = true;

			// Apply changes to the serializedProperty
			if (GUI.changed){
				
				serializedObject.ApplyModifiedProperties();

				material.CommitChanges(changes);
				
			}
			
		}
		
	}
}


